"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  heroImageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): HeroImageCollection
  testRichTextCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): TestRichTextCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
Short summary of the page topic. Appears in the first paragraph [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/briefSummary)
"""
type BriefSummary implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): BriefSummaryLinkingCollections
  summaryText(locale: String): String
  sys: Sys!
}

type BriefSummaryCollection {
  items: [BriefSummary]!
  limit: Int!
  skip: Int!
  total: Int!
}

input BriefSummaryFilter {
  AND: [BriefSummaryFilter]
  OR: [BriefSummaryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  summaryText: String
  summaryText_contains: String
  summaryText_exists: Boolean
  summaryText_in: [String]
  summaryText_not: String
  summaryText_not_contains: String
  summaryText_not_in: [String]
  sys: SysFilter
}

type BriefSummaryLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  officePageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): OfficePageCollection
}

enum BriefSummaryOrder {
  summaryText_ASC
  summaryText_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
a bulleted list of things [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/bulletedList)
"""
type BulletedList implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): BulletedListLinkingCollections
  listName(locale: String): [String]
  sys: Sys!
}

type BulletedListCollection {
  items: [BulletedList]!
  limit: Int!
  skip: Int!
  total: Int!
}

input BulletedListFilter {
  AND: [BulletedListFilter]
  OR: [BulletedListFilter]
  contentfulMetadata: ContentfulMetadataFilter
  listName_contains_all: [String]
  listName_contains_none: [String]
  listName_contains_some: [String]
  listName_exists: Boolean
  sys: SysFilter
}

type BulletedListLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  listWithTitleCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ListWithTitleCollection
}

enum BulletedListOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Headline for block-level content, such as paragraphs, tables or cards within the body of the page [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/contentBlockHeader)
"""
type ContentBlockHeader implements Entry {
  contentfulMetadata: ContentfulMetadata!
  headlineText(locale: String): String
  linkedFrom(allowedLocales: [String]): ContentBlockHeaderLinkingCollections
  sys: Sys!
}

type ContentBlockHeaderCollection {
  items: [ContentBlockHeader]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ContentBlockHeaderFilter {
  AND: [ContentBlockHeaderFilter]
  OR: [ContentBlockHeaderFilter]
  contentfulMetadata: ContentfulMetadataFilter
  headlineText: String
  headlineText_contains: String
  headlineText_exists: Boolean
  headlineText_in: [String]
  headlineText_not: String
  headlineText_not_contains: String
  headlineText_not_in: [String]
  sys: SysFilter
}

type ContentBlockHeaderLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  listWithTitleCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ListWithTitleCollection
}

enum ContentBlockHeaderOrder {
  headlineText_ASC
  headlineText_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

"""
A draft of how we will structure individual navigation links that can appear either in the main menu in the header, in a submenu under the main menu in the header, or in a section sidebar. [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/draftNavigationLink)
"""
type DraftNavigationLink implements Entry {
  contentfulMetadata: ContentfulMetadata!
  link(locale: String): String
  linkedFrom(allowedLocales: [String]): DraftNavigationLinkLinkingCollections
  sys: Sys!
  text(locale: String): String
}

type DraftNavigationLinkCollection {
  items: [DraftNavigationLink]!
  limit: Int!
  skip: Int!
  total: Int!
}

input DraftNavigationLinkFilter {
  AND: [DraftNavigationLinkFilter]
  OR: [DraftNavigationLinkFilter]
  contentfulMetadata: ContentfulMetadataFilter
  link: String
  link_contains: String
  link_exists: Boolean
  link_in: [String]
  link_not: String
  link_not_contains: String
  link_not_in: [String]
  sys: SysFilter
  text: String
  text_contains: String
  text_exists: Boolean
  text_in: [String]
  text_not: String
  text_not_contains: String
  text_not_in: [String]
}

type DraftNavigationLinkLinkingCollections {
  draftNavigationMenuCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): DraftNavigationMenuCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum DraftNavigationLinkOrder {
  link_ASC
  link_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  text_ASC
  text_DESC
}

"""
A draft of how we will structure navigation menus that can appear either as the main menu in the header, a submenu under the main menu in the header, or a section sidebar. Should accept a list of references to either navigation links or child navigation menus. [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/draftNavigationMenu)
"""
type DraftNavigationMenu implements Entry {
  childrenCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): DraftNavigationMenuChildrenCollection
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): DraftNavigationMenuLinkingCollections
  sys: Sys!
  text(locale: String): String
  type(locale: String): String
}

type DraftNavigationMenuChildrenCollection {
  items: [DraftNavigationMenuChildrenItem]!
  limit: Int!
  skip: Int!
  total: Int!
}

union DraftNavigationMenuChildrenItem = DraftNavigationLink | DraftNavigationMenu

type DraftNavigationMenuCollection {
  items: [DraftNavigationMenu]!
  limit: Int!
  skip: Int!
  total: Int!
}

input DraftNavigationMenuFilter {
  AND: [DraftNavigationMenuFilter]
  OR: [DraftNavigationMenuFilter]
  childrenCollection_exists: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
  text: String
  text_contains: String
  text_exists: Boolean
  text_in: [String]
  text_not: String
  text_not_contains: String
  text_not_in: [String]
  type: String
  type_contains: String
  type_exists: Boolean
  type_in: [String]
  type_not: String
  type_not_contains: String
  type_not_in: [String]
}

type DraftNavigationMenuLinkingCollections {
  draftNavigationMenuCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): DraftNavigationMenuCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum DraftNavigationMenuOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  text_ASC
  text_DESC
  type_ASC
  type_DESC
}

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Large (h1) headline on top of web page [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/headline)
"""
type Headline implements Entry {
  contentfulMetadata: ContentfulMetadata!
  headlineText(locale: String): String
  linkedFrom(allowedLocales: [String]): HeadlineLinkingCollections
  sys: Sys!
}

type HeadlineCollection {
  items: [Headline]!
  limit: Int!
  skip: Int!
  total: Int!
}

input HeadlineFilter {
  AND: [HeadlineFilter]
  OR: [HeadlineFilter]
  contentfulMetadata: ContentfulMetadataFilter
  headlineText: String
  headlineText_contains: String
  headlineText_exists: Boolean
  headlineText_in: [String]
  headlineText_not: String
  headlineText_not_contains: String
  headlineText_not_in: [String]
  sys: SysFilter
}

type HeadlineLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum HeadlineOrder {
  headlineText_ASC
  headlineText_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Big wide image on top of page [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/heroImage)
"""
type HeroImage implements Entry {
  contentfulMetadata: ContentfulMetadata!
  imageSource(locale: String, preview: Boolean): Asset
  linkedFrom(allowedLocales: [String]): HeroImageLinkingCollections
  sys: Sys!
}

type HeroImageCollection {
  items: [HeroImage]!
  limit: Int!
  skip: Int!
  total: Int!
}

input HeroImageFilter {
  AND: [HeroImageFilter]
  OR: [HeroImageFilter]
  contentfulMetadata: ContentfulMetadataFilter
  imageSource_exists: Boolean
  sys: SysFilter
}

type HeroImageLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  officePageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): OfficePageCollection
}

enum HeroImageOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Single bulleted list with descriptive header [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/listWithTitle)
"""
type ListWithTitle implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): ListWithTitleLinkingCollections
  sys: Sys!
  titledList(locale: String, preview: Boolean): BulletedList
  titledListName(locale: String, preview: Boolean): ContentBlockHeader
}

type ListWithTitleCollection {
  items: [ListWithTitle]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ListWithTitleFilter {
  AND: [ListWithTitleFilter]
  OR: [ListWithTitleFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
  titledList: cfBulletedListNestedFilter
  titledListName: cfContentBlockHeaderNestedFilter
  titledListName_exists: Boolean
  titledList_exists: Boolean
}

type ListWithTitleLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum ListWithTitleOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Home page. for LDAF offices [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/officePage)
"""
type OfficePage implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): OfficePageLinkingCollections
  officeHero(locale: String, preview: Boolean): HeroImage
  officePageTitle(locale: String): String
  officeSubhead(locale: String, preview: Boolean): PageSubheader
  officeSummary(locale: String, preview: Boolean): BriefSummary
  serviceCategoryTitle(locale: String): String
  serviceList(locale: String): [String]
  sys: Sys!
}

type OfficePageCollection {
  items: [OfficePage]!
  limit: Int!
  skip: Int!
  total: Int!
}

input OfficePageFilter {
  AND: [OfficePageFilter]
  OR: [OfficePageFilter]
  contentfulMetadata: ContentfulMetadataFilter
  officeHero: cfHeroImageNestedFilter
  officeHero_exists: Boolean
  officePageTitle: String
  officePageTitle_contains: String
  officePageTitle_exists: Boolean
  officePageTitle_in: [String]
  officePageTitle_not: String
  officePageTitle_not_contains: String
  officePageTitle_not_in: [String]
  officeSubhead: cfPageSubheaderNestedFilter
  officeSubhead_exists: Boolean
  officeSummary: cfBriefSummaryNestedFilter
  officeSummary_exists: Boolean
  serviceCategoryTitle: String
  serviceCategoryTitle_contains: String
  serviceCategoryTitle_exists: Boolean
  serviceCategoryTitle_in: [String]
  serviceCategoryTitle_not: String
  serviceCategoryTitle_not_contains: String
  serviceCategoryTitle_not_in: [String]
  serviceList_contains_all: [String]
  serviceList_contains_none: [String]
  serviceList_contains_some: [String]
  serviceList_exists: Boolean
  sys: SysFilter
}

type OfficePageLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum OfficePageOrder {
  officePageTitle_ASC
  officePageTitle_DESC
  serviceCategoryTitle_ASC
  serviceCategoryTitle_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Headline for content sections within body of page [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/pageSectionHeadline)
"""
type PageSectionHeadline implements Entry {
  contentfulMetadata: ContentfulMetadata!
  headlineText(locale: String): String
  linkedFrom(allowedLocales: [String]): PageSectionHeadlineLinkingCollections
  sys: Sys!
}

type PageSectionHeadlineCollection {
  items: [PageSectionHeadline]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PageSectionHeadlineFilter {
  AND: [PageSectionHeadlineFilter]
  OR: [PageSectionHeadlineFilter]
  contentfulMetadata: ContentfulMetadataFilter
  headlineText: String
  headlineText_contains: String
  headlineText_exists: Boolean
  headlineText_in: [String]
  headlineText_not: String
  headlineText_not_contains: String
  headlineText_not_in: [String]
  sys: SysFilter
}

type PageSectionHeadlineLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum PageSectionHeadlineOrder {
  headlineText_ASC
  headlineText_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
Short, descriptive subheading beneath page title [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/pageSubheader)
"""
type PageSubheader implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): PageSubheaderLinkingCollections
  subheadText(locale: String): String
  sys: Sys!
}

type PageSubheaderCollection {
  items: [PageSubheader]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PageSubheaderFilter {
  AND: [PageSubheaderFilter]
  OR: [PageSubheaderFilter]
  contentfulMetadata: ContentfulMetadataFilter
  subheadText: String
  subheadText_contains: String
  subheadText_exists: Boolean
  subheadText_in: [String]
  subheadText_not: String
  subheadText_not_contains: String
  subheadText_not_in: [String]
  sys: SysFilter
}

type PageSubheaderLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  officePageCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): OfficePageCollection
}

enum PageSubheaderOrder {
  subheadText_ASC
  subheadText_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  briefSummary(id: String!, locale: String, preview: Boolean): BriefSummary
  briefSummaryCollection(limit: Int = 100, locale: String, order: [BriefSummaryOrder], preview: Boolean, skip: Int = 0, where: BriefSummaryFilter): BriefSummaryCollection
  bulletedList(id: String!, locale: String, preview: Boolean): BulletedList
  bulletedListCollection(limit: Int = 100, locale: String, order: [BulletedListOrder], preview: Boolean, skip: Int = 0, where: BulletedListFilter): BulletedListCollection
  contentBlockHeader(id: String!, locale: String, preview: Boolean): ContentBlockHeader
  contentBlockHeaderCollection(limit: Int = 100, locale: String, order: [ContentBlockHeaderOrder], preview: Boolean, skip: Int = 0, where: ContentBlockHeaderFilter): ContentBlockHeaderCollection
  draftNavigationLink(id: String!, locale: String, preview: Boolean): DraftNavigationLink
  draftNavigationLinkCollection(limit: Int = 100, locale: String, order: [DraftNavigationLinkOrder], preview: Boolean, skip: Int = 0, where: DraftNavigationLinkFilter): DraftNavigationLinkCollection
  draftNavigationMenu(id: String!, locale: String, preview: Boolean): DraftNavigationMenu
  draftNavigationMenuCollection(limit: Int = 100, locale: String, order: [DraftNavigationMenuOrder], preview: Boolean, skip: Int = 0, where: DraftNavigationMenuFilter): DraftNavigationMenuCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  headline(id: String!, locale: String, preview: Boolean): Headline
  headlineCollection(limit: Int = 100, locale: String, order: [HeadlineOrder], preview: Boolean, skip: Int = 0, where: HeadlineFilter): HeadlineCollection
  heroImage(id: String!, locale: String, preview: Boolean): HeroImage
  heroImageCollection(limit: Int = 100, locale: String, order: [HeroImageOrder], preview: Boolean, skip: Int = 0, where: HeroImageFilter): HeroImageCollection
  listWithTitle(id: String!, locale: String, preview: Boolean): ListWithTitle
  listWithTitleCollection(limit: Int = 100, locale: String, order: [ListWithTitleOrder], preview: Boolean, skip: Int = 0, where: ListWithTitleFilter): ListWithTitleCollection
  officePage(id: String!, locale: String, preview: Boolean): OfficePage
  officePageCollection(limit: Int = 100, locale: String, order: [OfficePageOrder], preview: Boolean, skip: Int = 0, where: OfficePageFilter): OfficePageCollection
  pageSectionHeadline(id: String!, locale: String, preview: Boolean): PageSectionHeadline
  pageSectionHeadlineCollection(limit: Int = 100, locale: String, order: [PageSectionHeadlineOrder], preview: Boolean, skip: Int = 0, where: PageSectionHeadlineFilter): PageSectionHeadlineCollection
  pageSubheader(id: String!, locale: String, preview: Boolean): PageSubheader
  pageSubheaderCollection(limit: Int = 100, locale: String, order: [PageSubheaderOrder], preview: Boolean, skip: Int = 0, where: PageSubheaderFilter): PageSubheaderCollection
  testRichText(id: String!, locale: String, preview: Boolean): TestRichText
  testRichTextCollection(limit: Int = 100, locale: String, order: [TestRichTextOrder], preview: Boolean, skip: Int = 0, where: TestRichTextFilter): TestRichTextCollection
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}

"""
Example content type with some rich text. [See type definition](https://app.contentful.com/spaces/pc5e1rlgfrov/content_types/testRichText)
"""
type TestRichText implements Entry {
  body(locale: String): TestRichTextBody
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): TestRichTextLinkingCollections
  mainImage(locale: String, preview: Boolean): Asset
  sys: Sys!
  title(locale: String): String
}

type TestRichTextBody {
  json: JSON!
  links: TestRichTextBodyLinks!
}

type TestRichTextBodyAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type TestRichTextBodyEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type TestRichTextBodyLinks {
  assets: TestRichTextBodyAssets!
  entries: TestRichTextBodyEntries!
}

type TestRichTextCollection {
  items: [TestRichText]!
  limit: Int!
  skip: Int!
  total: Int!
}

input TestRichTextFilter {
  AND: [TestRichTextFilter]
  OR: [TestRichTextFilter]
  body_contains: String
  body_exists: Boolean
  body_not_contains: String
  contentfulMetadata: ContentfulMetadataFilter
  mainImage_exists: Boolean
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}

type TestRichTextLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum TestRichTextOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

input cfBriefSummaryNestedFilter {
  AND: [cfBriefSummaryNestedFilter]
  OR: [cfBriefSummaryNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  summaryText: String
  summaryText_contains: String
  summaryText_exists: Boolean
  summaryText_in: [String]
  summaryText_not: String
  summaryText_not_contains: String
  summaryText_not_in: [String]
  sys: SysFilter
}

input cfBulletedListNestedFilter {
  AND: [cfBulletedListNestedFilter]
  OR: [cfBulletedListNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  listName_contains_all: [String]
  listName_contains_none: [String]
  listName_contains_some: [String]
  listName_exists: Boolean
  sys: SysFilter
}

input cfContentBlockHeaderNestedFilter {
  AND: [cfContentBlockHeaderNestedFilter]
  OR: [cfContentBlockHeaderNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  headlineText: String
  headlineText_contains: String
  headlineText_exists: Boolean
  headlineText_in: [String]
  headlineText_not: String
  headlineText_not_contains: String
  headlineText_not_in: [String]
  sys: SysFilter
}

input cfHeroImageNestedFilter {
  AND: [cfHeroImageNestedFilter]
  OR: [cfHeroImageNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  imageSource_exists: Boolean
  sys: SysFilter
}

input cfPageSubheaderNestedFilter {
  AND: [cfPageSubheaderNestedFilter]
  OR: [cfPageSubheaderNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  subheadText: String
  subheadText_contains: String
  subheadText_exists: Boolean
  subheadText_in: [String]
  subheadText_not: String
  subheadText_not_contains: String
  subheadText_not_in: [String]
  sys: SysFilter
}